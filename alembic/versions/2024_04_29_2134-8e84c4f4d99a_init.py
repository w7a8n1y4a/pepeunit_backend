"""init

Revision ID: 8e84c4f4d99a
Revises: 
Create Date: 2024-04-29 21:34:35.046515

"""
from alembic import op
import sqlalchemy as sa
import sqlmodel
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '8e84c4f4d99a'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('uuid', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('role', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('status', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('login', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('email', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('hashed_password', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('cipher_dynamic_salt', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('create_datetime', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('uuid'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('login')
    )
    op.create_index(op.f('ix_users_uuid'), 'users', ['uuid'], unique=False)
    op.create_table('repos',
    sa.Column('creator_uuid', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('uuid', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('visibility_level', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('create_datetime', sa.DateTime(), nullable=False),
    sa.Column('repo_url', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('is_public_repository', sa.Boolean(), nullable=False),
    sa.Column('cipher_credentials_private_repository', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('default_branch', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('is_auto_update_repo', sa.Boolean(), nullable=False),
    sa.Column('update_frequency_in_seconds', sa.Integer(), nullable=False),
    sa.Column('last_update_datetime', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['creator_uuid'], ['users.uuid'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('uuid'),
    sa.UniqueConstraint('name')
    )
    op.create_index(op.f('ix_repos_uuid'), 'repos', ['uuid'], unique=False)
    op.create_table('units',
    sa.Column('creator_uuid', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('repo_uuid', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('uuid', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('visibility_level', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('create_datetime', sa.DateTime(), nullable=False),
    sa.Column('is_auto_update_from_repo_unit', sa.Boolean(), nullable=False),
    sa.Column('repo_branch', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('repo_commit', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('last_update_datetime', sa.DateTime(), nullable=False),
    sa.Column('unit_state_dict', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('cipher_env_dict', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.ForeignKeyConstraint(['creator_uuid'], ['users.uuid'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['repo_uuid'], ['repos.uuid'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('uuid'),
    sa.UniqueConstraint('name')
    )
    op.create_index(op.f('ix_units_uuid'), 'units', ['uuid'], unique=False)
    op.create_table('units_nodes',
    sa.Column('unit_uuid', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('uuid', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('type', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('visibility_level', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('is_rewritable_input', sa.Boolean(), nullable=False),
    sa.Column('topic_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('create_datetime', sa.DateTime(), nullable=False),
    sa.Column('state', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.ForeignKeyConstraint(['unit_uuid'], ['units.uuid'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('uuid')
    )
    op.create_index(op.f('ix_units_nodes_uuid'), 'units_nodes', ['uuid'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_units_nodes_uuid'), table_name='units_nodes')
    op.drop_table('units_nodes')
    op.drop_index(op.f('ix_units_uuid'), table_name='units')
    op.drop_table('units')
    op.drop_index(op.f('ix_repos_uuid'), table_name='repos')
    op.drop_table('repos')
    op.drop_index(op.f('ix_users_uuid'), table_name='users')
    op.drop_table('users')
    # ### end Alembic commands ###
